---
# Let's grab a letsencrypt cert
#

- name: "Create required directories in /etc/letsencrypt"
  file:
    path: "/etc/letsencrypt/{{ item }}"
    state: directory
    owner: root
    group: root
    mode: u=rwx,g=x,o=x
  with_items:
  - account
  - certs
  - csrs
  - keys

- name: Get data for existing cert
  stat:
    path: "/etc/letsencrypt/certs/{{ ansible_fqdn }}.crt"
  register: lecert

- name: Get data for account key
  stat:
    path: "{{ letsencrypt_account_key }}"
  register: accountkey

- name: Get data for private key
  stat:
    path: "/etc/letsencrypt/keys/{{ domain_name }}.key"
  register: domainkey

- name: "Generate a Let's Encrypt account key"
  shell: "if [ ! -f {{ letsencrypt_account_key }} ]; then openssl genrsa 4096 | sudo tee {{ letsencrypt_account_key }}; fi"
  when: not accountkey.stat.exists

- name: "Generate Let's Encrypt private key"
  shell: "openssl genrsa 4096 | sudo tee /etc/letsencrypt/keys/{{ domain_name }}.key"
  when: not domainkey.stat.exists

- name: "Generate Let's Encrypt CSR"
  shell: "openssl req -new -sha256 -key /etc/letsencrypt/keys/{{ domain_name }}.key -subj \"/CN={{ domain_name }}\" -reqexts SAN -config <(cat /etc/ssl/openssl.cnf <(printf \"\n[SAN]\nsubjectAltName=DNS:{{ domain_name }}\")) | sudo tee /etc/letsencrypt/csrs/{{ domain_name }}.csr"
  args:
    executable: /bin/bash
  when: not lecert.stat.exists

- name: Check if certs need renewal
  openssl_certificate_info:
    path: "/etc/letsencrypt/certs/{{ ansible_fqdn }}.crt"
    valid_at:
      twoweeks: "+2w"
  register: certrenew
  when: lecert.stat.exists

- name: Clean up old keys
  file:
    path: "/etc/letsencrypt/certs/{{ ansible_fqdn }}.crt"
    state: absent
  when: lecert.stat.exists and certrenew.valid_at.twoweeks == False

- name: "Begin Let's Encrypt challenges"
  acme_certificate:
    acme_directory: "{{ acme_directory }}"
    acme_version: "{{ acme_version }}"
    account_key_src: "{{ letsencrypt_account_key }}"
    account_email: "{{ acme_email }}"
    terms_agreed: 1
    challenge: "{{ acme_challenge_type }}"
    csr: "{{ letsencrypt_csrs_dir }}/{{ domain_name }}.csr"
    dest: "{{ letsencrypt_certs_dir }}/{{ domain_name }}.crt"
    fullchain_dest: "{{ letsencrypt_certs_dir }}/fullchain_{{ domain_name }}.crt"
    remaining_days: 91
  register: acme_challenge_your_domain
  when: not lecert.stat.exists or certrenew.valid_at.twoweeks == False

- name: "Create .well-known/acme-challenge directory"
  file:
    path: /var/www/html/.well-known/acme-challenge
    state: directory
    owner: root
    group: root
    mode: u=rwx,g=rx,o=rx
  when: not lecert.stat.exists or certrenew.valid_at.twoweeks == False

- name: "Implement http-01 challenge files"
  copy:
    content: "{{ acme_challenge_your_domain['challenge_data'][item]['http-01']['resource_value'] }}"
    dest: "/var/www/html/{{ acme_challenge_your_domain['challenge_data'][item]['http-01']['resource'] }}"
    owner: root
    group: root
    mode: u=rw,g=r,o=r
  with_items:
  - "{{ domain_name }}"
  when: not lecert.stat.exists or certrenew.valid_at.twoweeks == False

- name: "Complete Let's Encrypt challenges"
  acme_certificate:
    acme_directory: "{{ acme_directory }}"
    acme_version: "{{ acme_version }}"
    account_key_src: "{{ letsencrypt_account_key }}"
    account_email: "{{ acme_email }}"
    challenge: "{{ acme_challenge_type }}"
    csr: "{{ letsencrypt_csrs_dir }}/{{ domain_name }}.csr"
    dest: "{{ letsencrypt_certs_dir }}/{{ domain_name }}.crt"
    chain_dest: "{{ letsencrypt_certs_dir }}/chain_{{ domain_name }}.crt"
    fullchain_dest: "{{ letsencrypt_certs_dir }}/fullchain_{{ domain_name }}"
    data: "{{ acme_challenge_your_domain }}"
  when: not lecert.stat.exists or certrenew.valid_at.twoweeks == False


